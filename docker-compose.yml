services:
  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - ENROLL_TRACKER_RSA_PUBLIC_KEY=${ENROLL_TRACKER_RSA_PUBLIC_KEY}
  api:
    container_name: api
    build: ./backend
    ports:
      - "${API_HOST_PORT}:${API_CONTAINER_PORT}"
    environment:
      - API_CONTAINER_PORT=${API_CONTAINER_PORT}
      - DB_CONTAINER_PORT=${DB_CONTAINER_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${DB_NAME}
      - ENROLL_TRACKER_RSA_PUBLIC_KEY=${ENROLL_TRACKER_RSA_PUBLIC_KEY}
      - ENROLL_TRACKER_RSA_PRIVATE_KEY=${ENROLL_TRACKER_RSA_PRIVATE_KEY}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST_PORT=${REDIS_HOST_PORT}
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
  db:
    container_name: db
    image: postgres:latest
    restart: always
    ports:
      - "${DB_HOST_PORT}:${DB_CONTAINER_PORT}" # "Host Port: Container Port"
    environment:
      - POSTGRES_USER=${POSTGRES_USER} 
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "${REDIS_HOST_PORT}:${REDIS_CONTAINER_PORT}"
    command: redis-server --requirepass ${REDIS_PASSWORD}
  flyway:
    container_name: flyway
    image: flyway/flyway:latest
    command: -locations=filesystem:/flyway/sql -connectRetries=60 migrate
    volumes:
      - ./backend/internal/db:/flyway/sql
    environment:
      - FLYWAY_USER=${POSTGRES_USER}
      - FLYWAY_PASSWORD=${POSTGRES_PASSWORD}
      - FLYWAY_URL=jdbc:postgresql://db:${DB_CONTAINER_PORT}/${DB_NAME}
    depends_on:
      - db
